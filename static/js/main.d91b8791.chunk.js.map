{"version":3,"sources":["utils/index.ts","hooks/useLocalStorage.ts","constants/index.ts","services/indexed-db.ts","App.tsx","components/Time.tsx","components/DateFilter.tsx","components/Textarea.tsx","reportWebVitals.ts","index.tsx"],"names":["identity","value","generateUniqueID","uuidv4","useLocalStorageState","key","defaultValue","castInto","useState","localStorage","getItem","state","setState","setItem","WORK_LOG","promisifyOnSuccess","request","a","Promise","resolve","addEventListener","event","target","result","getIndexedDbInstance","indexedDB","open","createObjectStore","autoIncrement","createIndex","unique","removeIndexDbStore","db","transaction","objectStore","clear","fetchWorkLogEntries","promise","dateIndex","index","getAllKeys","keys","promises","map","get","all","results","resultsWithKeys","createWorkLogEntry","payload","uniqueId","put","dateCreation","Date","toJSON","updateWorkLogEntry","onsuccess","__timerInstance","Time","seconds","className","Math","floor","DateFilter","currentDate","getFullYear","currentYear","setCurrentYear","getMonth","currentMonth","setCurrentMonth","getDay","currentDay","setCurrentDay","style","display","justifyContent","marginTop","onChange","Number","Array","fill","_","Textarea","inputElement","useRef","useEffect","current","focus","select","ref","App","workLogEntriesFetcher","setSeconds","Boolean","isRunning","setIsRunning","projectName","setProjectName","workLogEntries","setWorkLogEntries","notes","setNotes","ratePerHour","setRatePerHour","currency","setCurrency","currentEditingEntry","setCurrentEditingEntry","currentEditingField","setCurrentEditingField","showFilterBar","setShowFilterBar","error","setError","info","setInfo","exportDatabases","stringifiedJSONDump","JSON","stringify","entries","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","loadWorkLogEntries","removeItem","querySelector","setTimeout","clearTimeout","date","processSaveButton","getDate","processLogEntryEdit","currentWorkLogEntry","find","entry","resetCurrentDatabase","totalSeconds","reduce","left","right","id","htmlFor","type","flexDirection","rows","gap","onClick","href","preventDefault","length","colSpan","verticalAlign","cursor","number","numberIndex","width","year","month","day","whiteSpace","rowSpan","textAlign","name","fontSize","toFixed","files","reader","FileReader","onload","dump","parse","readAsText","window","confirm","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d91b8791.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\n\nexport const identity = (value: any) => value;\n\nexport const generateUniqueID = () => {\n  return uuidv4();\n}\n","import { useState } from 'react';\nimport { identity } from '../utils';\n\nexport const useLocalStorageState = (key: string, defaultValue: any, castInto: Function=identity) => {\n  const [state, setState] = useState(\n    castInto(localStorage.getItem(key) || defaultValue)\n  );\n  return [\n    state,\n    (value: string) => {\n      localStorage.setItem(key, value);\n      setState(value);\n    },\n  ];\n}\n","export const DB_NAME = \"time-tracker\";\nexport const DB_VERSION = 1;\nexport const WORK_LOG = \"work-log\";\n","import { WORK_LOG, DB_NAME, DB_VERSION } from '../constants';\nimport { WorkLogEntries, WorkLogEntry } from '../types';\nimport { generateUniqueID } from '../utils';\n\nexport const promisifyOnSuccess = async (request: IDBRequest) => {\n  return new Promise<any>((resolve) => {\n    request.addEventListener('success', (event: Event) => {\n      const target = event.target as IDBRequest;\n      resolve(target.result);\n    });\n  });\n}\n\nexport const getIndexedDbInstance = async () => {\n  return new Promise<IDBDatabase>(async (resolve) => {\n    const request: IDBRequest = indexedDB.open(DB_NAME, DB_VERSION);\n\n    request.addEventListener('upgradeneeded', () => {\n      const documentObjectsStore = request.result.createObjectStore(WORK_LOG, { autoIncrement: false });\n      documentObjectsStore.createIndex(\"dateCreation\", \"dateCreation\", { unique: false });\n    })\n    \n    request.addEventListener('success', () => {\n      resolve(request.result);\n    });\n  });\n}\n\nexport const removeIndexDbStore = async () => {\n  const db: IDBDatabase = await getIndexedDbInstance();\n  const transaction: IDBTransaction = db.transaction(WORK_LOG, \"readwrite\");\n  const objectStore: IDBObjectStore = transaction.objectStore(WORK_LOG);\n  objectStore.clear();\n  return Promise.resolve();\n}\n\nexport async function fetchWorkLogEntries() {\n  const promise = new Promise(async (resolve) => {\n    const db = await getIndexedDbInstance();\n    const transaction = db.transaction(WORK_LOG, \"readonly\");\n    const objectStore = transaction.objectStore(WORK_LOG);\n    const dateIndex = objectStore.index(\"dateCreation\");\n    const keys: Array<string> = await promisifyOnSuccess(dateIndex.getAllKeys());\n    const promises = keys.map((key) =>\n      promisifyOnSuccess(objectStore.get(key))\n    );\n    const results = await Promise.all(promises);\n    const resultsWithKeys: Array<WorkLogEntry> = keys.map((key, index) => ({\n      key,\n      ...results[index],\n    }));\n    resolve(resultsWithKeys);\n  });\n\n  return promise as Promise<WorkLogEntries>;\n}\n\nexport async function createWorkLogEntry(payload:WorkLogEntry, uniqueId: string='') {\n  const promise: Promise<void> = new Promise(async (resolve) => {\n    const db = await getIndexedDbInstance();\n    const transaction = db.transaction(WORK_LOG, \"readwrite\");\n    const objectStore = transaction.objectStore(WORK_LOG);\n    const key = uniqueId || generateUniqueID();\n    const request: IDBRequest = objectStore.put({\n      ...payload,\n      dateCreation: payload.dateCreation || new Date().toJSON(),\n      key\n    },key);\n    request.addEventListener('success', () => resolve())\n  });\n  return promise;\n}\n\nexport async function updateWorkLogEntry(payload: WorkLogEntry, key: string) {\n  const promise = new Promise(async (resolve) => {\n    const db = await getIndexedDbInstance();\n    const transaction = db.transaction(WORK_LOG, \"readwrite\");\n    const objectStore = transaction.objectStore(WORK_LOG);\n    objectStore.put(payload, key).onsuccess = resolve;\n  });\n  return promise;\n}\n","import { useState, useEffect, ChangeEvent, ChangeEventHandler } from 'react';\n\nimport { useLocalStorageState } from './hooks/useLocalStorage';\nimport {\n  fetchWorkLogEntries,\n  removeIndexDbStore,\n  updateWorkLogEntry,\n  createWorkLogEntry,\n} from './services/indexed-db';\nimport { WorkLogEntries } from './types';\nimport { generateUniqueID } from './utils';\n\nimport Time from './components/Time';\nimport DateFilter from './components/DateFilter';\nimport Textarea from './components/Textarea';\n\nimport './App.css';\n\nlet __timerInstance: NodeJS.Timeout;\n\ntype AppProps = {\n  workLogEntriesFetcher?: Function;\n}\n\nfunction App({\n  workLogEntriesFetcher\n}: AppProps) {\n  const [seconds, setSeconds] = useLocalStorageState(\"seconds\", 0, Number);\n  const [isRunning, setIsRunning] = useLocalStorageState(\"isRunning\", false, Boolean);\n  const [projectName, setProjectName] = useLocalStorageState(\"projectName\", \"\");\n  const [workLogEntries, setWorkLogEntries] = useState<WorkLogEntries>([]);\n  const [notes, setNotes] = useLocalStorageState(\"notes\", \"\");\n  const [ratePerHour, setRatePerHour] = useLocalStorageState(\n    \"ratePerHour\",\n    0,\n    Number\n  );\n  const [currency, setCurrency] = useLocalStorageState(\"currency\", \"USD\");\n  const [currentEditingEntry, setCurrentEditingEntry] = useState<string | null>(null);\n  const [currentEditingField, setCurrentEditingField] = useState<string | null>(null);\n  const [showFilterBar, setShowFilterBar] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [info, setInfo] = useState<string | null>(null);\n  const loadFile: ChangeEventHandler = (event: ChangeEvent) => {\n    setError(null);\n    if (!event.target) {\n      return\n    }\n    const files = (event.target as HTMLInputElement).files;\n    if (!files) {\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      if (!event.target) {\n        return;\n      }\n      let dump;\n      try {\n        dump = JSON.parse(event.target.result as any);\n      } catch (e) {\n        setError(\"Provide a valid JSON file.\");\n        return;\n      }\n      const { entries } = dump;\n      for (const entry of entries) {\n        await createWorkLogEntry(entry, entry.key);\n      }\n      setInfo(\"Database loaded successfully.\");\n      await loadWorkLogEntries();\n    };\n    reader.readAsText(files[0]);\n  };\n\n  const exportDatabases = async () => {\n    const workLogEntries = await fetchWorkLogEntries();\n\n    const stringifiedJSONDump = JSON.stringify({\n      entries: workLogEntries,\n    });\n\n    const element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(stringifiedJSONDump)\n    );\n    element.setAttribute(\"download\", \"work-log-database.json\");\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  const loadWorkLogEntries = workLogEntriesFetcher || (async () => {\n    const entries = await fetchWorkLogEntries();\n    setWorkLogEntries(entries);\n  });\n  useEffect(() => {\n    if (loadWorkLogEntries) { loadWorkLogEntries() };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (isRunning) {\n      localStorage.setItem(\"seconds\", seconds);\n      localStorage.setItem(\"isRunning\", isRunning);\n    } else {\n      localStorage.removeItem(\"isRunning\");\n    }\n    if (seconds === 0) {\n      localStorage.removeItem(\"seconds\");\n    }\n    document.querySelector(\"link[rel='icon']\")?.setAttribute('href',\n      isRunning ? '/favicon-animated.ico' : '/favicon.ico');\n  }, [isRunning, seconds]);\n  useEffect(() => {\n    if (isRunning) {\n      __timerInstance = setTimeout(() => {\n        setSeconds(seconds + 1);\n      }, 1000);\n    }\n    return () => {\n      if (__timerInstance) {\n        clearTimeout(__timerInstance);\n      }\n    };\n  });\n  const processSaveButton = async () => {\n    const date = new Date();\n    await createWorkLogEntry({\n      key: generateUniqueID(),\n      dateCreation: new Date().toJSON(),\n      projectName,\n      seconds,\n      notes,\n      date: [date.getFullYear(), date.getMonth(), date.getDate()],\n    });\n    setNotes(\"\");\n    setIsRunning(false);\n    setSeconds(0);\n    if (__timerInstance) {\n      clearTimeout(__timerInstance);\n    }\n    await loadWorkLogEntries();\n  };\n  const processLogEntryEdit = async () => {\n    const currentWorkLogEntry = workLogEntries.find((entry) => entry.key === currentEditingEntry);\n    if (currentWorkLogEntry && currentEditingEntry) {\n      await updateWorkLogEntry(currentWorkLogEntry, currentEditingEntry);\n    }\n    setCurrentEditingEntry(null);\n  };\n  const resetCurrentDatabase = async () => {\n    await removeIndexDbStore();\n    await loadWorkLogEntries();\n  };\n  const totalSeconds = workLogEntries.reduce(\n    (left, right) => left + right.seconds,\n    0\n  );\n  return (\n    <div id=\"container\">\n      <h3 id=\"logo\">Time tracker</h3>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div style={{}}>\n          <label htmlFor={\"project-id\"}>Project</label>\n          <input\n            id={\"project-id\"}\n            type={\"text\"}\n            value={projectName}\n            onChange={(event) => setProjectName(event.target.value)}\n          />\n        </div>\n        <Time seconds={seconds} />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <label htmlFor=\"notes\">Notes</label>\n        <textarea\n          id=\"notes\"\n          value={notes}\n          onChange={(event) => setNotes(event.target.value)}\n          rows={4}\n        ></textarea>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"left\",\n          gap: 5,\n          marginTop: 5,\n        }}\n      >\n        <button\n          onClick={() => {\n            if (__timerInstance) {\n              clearTimeout(__timerInstance);\n            }\n\n            setIsRunning(!isRunning);\n          }}\n        >\n          {isRunning ? \"Pause\" : seconds === 0 ? \"Start\" : \"Continue\"}\n        </button>\n        {seconds > 0 && !isRunning && (\n          <button\n            onClick={() => {\n              setSeconds(0);\n            }}\n          >\n            Reset\n          </button>\n        )}\n        {seconds > 0 && <button onClick={() => processSaveButton()}>Save</button>}\n      </div>\n      <h3>Work log</h3>\n      <table>\n        <thead>\n          <tr>\n            <th className={\"table-header-project\"}>Project</th>\n            <th className={\"table-header-time\"}>Time</th>\n            <th className={\"table-header-date\"}>\n              <a href=\"#filter-bar\" onClick={event => {\n                event.preventDefault();\n                setShowFilterBar(!showFilterBar);\n              }}>Date</a>\n              {showFilterBar && (\n                <DateFilter />\n              )}\n            </th>\n            <th className={\"table-header-description\"}>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          {workLogEntries.length === 0 && (\n            <tr>\n              <td colSpan={4}>No data.</td>\n            </tr>\n          )}\n          {workLogEntries.map((entry) => (\n            <tr key={entry.key}>\n              <td style={{\n                verticalAlign: \"top\",\n              }}>{entry.projectName}</td>\n              <td\n                style={{\n                  verticalAlign: \"top\",\n                }}\n              >\n                <Time seconds={entry.seconds} />\n              </td>\n              <td\n                className={\"date-cell\"}\n                onClick={() => {\n                  setCurrentEditingEntry(entry.key);\n                  setCurrentEditingField(\"date\");\n                }}\n                style={{\n                  cursor: \"pointer\",\n                }}\n              >\n                {currentEditingEntry &&\n                  currentEditingEntry === entry.key &&\n                  currentEditingField === \"date\" ? (\n                  <>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        gap: 2,\n                      }}\n                    >\n                      {entry.date.map((number, index) => (\n                        <input\n                          onChange={(event) => {\n                            setWorkLogEntries(\n                              workLogEntries.map((entry) =>\n                                entry.key === currentEditingEntry\n                                  ? {\n                                    ...entry,\n                                    date: entry.date.map(\n                                      (number, numberIndex) =>\n                                        index === numberIndex\n                                          ? Number(event.target.value)\n                                          : number\n                                    ),\n                                  }\n                                  : entry\n                              )\n                            );\n                          }}\n                          style={{\n                            width: index === 0 ? \"60%\" : \"20%\",\n                          }}\n                          value={number}\n                          key={index}\n                        />\n                      ))}\n                    </div>\n                    <button\n                      onClick={processLogEntryEdit}\n                      style={{ width: \"60%\", marginTop: 3 }}\n                    >\n                      Save\n                    </button>\n                  </>\n                ) : (\n                  (([year, month, day]) => (\n                    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n                      <span className={'date-separator'}>{year}</span>\n                      /\n                      <span className={'date-separator'}>{month + 1}</span>\n                      /\n                      <span className={'date-separator'}>{day}</span>\n                    </div>\n                  ))(entry.date)\n                )}\n              </td>\n              <td\n                onClick={() => {\n                  setCurrentEditingEntry(entry.key);\n                  setCurrentEditingField(\"notes\");\n                }}\n                style={{\n                  verticalAlign: \"top\",\n                  cursor: \"pointer\",\n                }}\n              >\n                {currentEditingEntry &&\n                  currentEditingEntry === entry.key &&\n                  currentEditingField === \"notes\" ? (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                    }}\n                  >\n                    <Textarea\n                      onChange={(event: ChangeEvent) => {\n                        setWorkLogEntries(\n                          workLogEntries.map((entry) =>\n                            entry.key === currentEditingEntry\n                              ? { ...entry, notes: (event.target as any).value }\n                              : entry\n                          )\n                        );\n                      }}\n                      value={entry.notes}\n                    />\n                    <button\n                      onClick={processLogEntryEdit}\n                      style={{ width: \"20%\", marginTop: 3 }}\n                    >\n                      Save\n                    </button>\n                  </div>\n                ) : (\n                  <div style={{\n                    whiteSpace: 'break-spaces',\n                  }}>{entry.notes}</div>\n                )}\n              </td>\n            </tr>\n          ))}\n          {workLogEntries.length > 0 && (\n            <>\n              <tr className={\"total\"}>\n                <td>Total</td>\n                <td>\n                  <Time seconds={totalSeconds} />\n                </td>\n                <td rowSpan={2} style={{ verticalAlign: 'bottom', textAlign: 'center' }}>\n                  Todays date\n                  {(\n                    ((date) => (\n                      <div style={{ display: 'flex', width: '200', justifyContent: 'space-around' }}>\n                        <span className={'date-separator'}>{date.getFullYear()}</span>\n                        /\n                        <span className={'date-separator'}>{date.getMonth() + 1}</span>\n                        /\n                        <span className={'date-separator'}>{date.getDate()}</span>\n                      </div>\n                    ))(new Date())\n                  )}\n                </td>\n                <td style={{ verticalAlign: 'top' }}>\n\n                </td>\n              </tr>\n              <tr className={\"total-payment\"}>\n                <td></td>\n                <td>\n                  Rate per hour\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      gap: 3,\n                      marginTop: 3,\n                    }}\n                  >\n                    <input\n                      type={\"number\"}\n                      value={ratePerHour}\n                      style={{ width: \"60%\" }}\n                      onChange={(event) => setRatePerHour(event.target.value)}\n                    />\n                    <select\n                      style={{ width: \"40%\" }}\n                      onChange={(event) => setCurrency(event.target.value)}\n                      value={currency}\n                      name={\"currency\"}\n                    >\n                      {[\"USD\", \"TL\", \"EUR\"].map((currency) => (\n                        <option key={currency}>{currency}</option>\n                      ))}\n                    </select>\n                  </div>\n                </td>\n                <td colSpan={1} style={{}}>\n                  Payment in total<div style={{ fontSize: \"2rem\" }}>\n                    {Number((totalSeconds / 60 / 60) * ratePerHour).toFixed(2)}\n                    {({ \"USD\": \"$\", \"EUR\": \"€\", \"TL\": \"TL\" })[currency as string]}</div>\n                </td>\n              </tr>\n            </>\n          )}\n        </tbody>\n      </table>\n      <h3>Load a database</h3>\n      <p>\n        <input onChange={loadFile} type={\"file\"} />\n      </p>\n      <h3>Export current database</h3>\n      <p>\n        <button onClick={(event) => {\n          event.preventDefault();\n          exportDatabases()\n        }}>\n          <span>Export</span>\n        </button>\n      </p>\n      <h3>Reset current database</h3>\n      <p>\n        <button\n          onClick={() => {\n            if (\n              window.confirm(\n                \"Are you really sure to reset the current database?\"\n              )\n            ) {\n              resetCurrentDatabase();\n            }\n          }}\n        >\n          <span>Reset</span>\n        </button>\n      </p>\n      {error && <p className={\"error\"}>{error}</p>}\n      {info && <p className={\"info\"}>{info}</p>}\n      <footer>\n        Fatih Erikli, MIT Licensed, 2021.\n        <br />\n        Source code available on{\" \"}\n        <a\n          style={{ color: \"gray\" }}\n          target={\"blank\"}\n          href=\"https://github.com/fatih-erikli/time-tracker\"\n        >\n          github\n        </a>\n        .\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","type TimeProps = {\n  seconds: number;\n};\n\nconst Time = ({ seconds }: TimeProps) => {\n  return (\n    <div className={\"time\"}>\n      <div className={\"hours\"}>\n        <div className={\"digits\"}>{Math.floor(seconds / 60 / 60)}</div>\n        <div className={\"text\"}>hours</div>\n      </div>\n      <div className={\"minutes\"}>\n        <div className={\"digits\"}>{Math.floor(seconds / 60) % 60}</div>\n        <div className={\"text\"}>minutes</div>\n      </div>\n      <div className={\"seconds\"}>\n        <div className={\"digits\"}>{seconds % 60}</div>\n        <div className={\"text\"}>seconds</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Time;\n","import { useState } from 'react';\n\nconst DateFilter = () => {\n  const currentDate = new Date();\n  const [currentYear, setCurrentYear] = useState(currentDate.getFullYear());\n  const [currentMonth, setCurrentMonth] = useState(currentDate.getMonth());\n  const [currentDay, setCurrentDay] = useState(currentDate.getDay());\n  return (\n    <div style={{\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginTop: 3,\n    }}>\n      <select value={currentYear} onChange={event => setCurrentYear(Number(event.target.value))}>\n        <option>Year</option>\n        {new Array(100).fill(0).map((_, index) => <option>{currentYear - index}</option>)}\n      </select>\n      <select value={currentMonth} onChange={event => setCurrentMonth(Number(event.target.value))}>\n        <option>Month</option>\n        {new Array(11).fill(0).map((_, index) => <option>{currentMonth - index}</option>)}\n      </select>\n      <select value={currentDay} onChange={event => setCurrentDay(Number(event.target.value))}>\n        <option>Day</option>\n        {new Array(30).fill(0).map((_, index) => <option>{currentDay - index}</option>)}\n      </select>\n    </div>\n  );\n}\n\nexport default DateFilter;\n","import { ChangeEventHandler, useEffect, useRef } from \"react\";\n\ntype TextareaProps = {\n  value: string;\n  onChange: ChangeEventHandler;\n};\n\nexport const Textarea = ({ value, onChange } : TextareaProps) => {\n  const inputElement = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (inputElement.current) {\n      inputElement.current.focus();\n      inputElement.current.select();\n    }\n  }, []);\n  return (\n    <textarea ref={inputElement} value={value} onChange={onChange}></textarea>\n  );\n}\n\nexport default Textarea;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}